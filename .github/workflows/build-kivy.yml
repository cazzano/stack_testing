name: Build APK - Official Kivy Buildozer

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'cross_plateform'
        type: string

jobs:
  build-android-buildozer:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || 'cross_plateform' }}
        path: source-code
    
    - name: Free up disk space
      run: |
        # Clean up unnecessary files to free space
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        docker system prune -af
        df -h
    
    - name: Prepare build workspace
      run: |
        # Create build workspace
        mkdir -p build-workspace
        cp -r source-code/python/kivy/* build-workspace/ 2>/dev/null || echo 'No kivy directory found, using root'
        
        # Create optimized buildozer.spec if none exists or replace existing
        cat > build-workspace/buildozer.spec << 'EOF'
[app]
title = My Kivy App
package.name = kivyapp
package.domain = org.example
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,txt,md
version = 0.1
requirements = python3,kivy==2.1.0,certifi
orientation = portrait
fullscreen = 0

[buildozer]
log_level = 2
warn_on_root = 0

[android]
android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
android.api = 33
android.minapi = 21
android.ndk = 25b
android.sdk = 33
android.ndk_api = 21
android.archs = arm64-v8a
android.accept_sdk_license = True
android.skip_update = False
android.gradle_dependencies = 
android.add_compile_options = 

# Auto-accept all Android SDK licenses
android.add_packaging_options = pickFirst **/libc++_shared.so, pickFirst **/libjsc.so
android.gradle_repositories = google(), mavenCentral()
EOF
        
        # Create a simple main.py if none exists
        if [ ! -f build-workspace/main.py ]; then
          cat > build-workspace/main.py << 'EOF'
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
import platform

class KivyApp(App):
    def build(self):
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        title = Label(
            text='Hello from Buildozer!',
            font_size='24sp',
            size_hint_y=None,
            height='60dp'
        )
        
        info = Label(
            text=f'Built with GitHub Actions\\nPython: {platform.python_version()}\\nArchitecture: {platform.machine()}',
            font_size='16sp',
            halign='center'
        )
        info.bind(size=info.setter('text_size'))
        
        layout.add_widget(title)
        layout.add_widget(info)
        return layout

if __name__ == '__main__':
    KivyApp().run()
EOF
        fi
        
        # Fix permissions for Docker
        chmod -R 755 build-workspace/
        
        echo 'Build workspace prepared:'
        ls -la build-workspace/
    
    - name: Cache buildozer directories
      uses: actions/cache@v3
      with:
        path: |
          ~/.buildozer
          build-workspace/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
    
    - name: Build Android APK with Official Kivy Buildozer Docker
      run: |
        echo "=== Starting APK Build with Official Kivy Buildozer ==="
        echo "Working directory: $(pwd)"
        echo "Build workspace contents:"
        ls -la build-workspace/
        
        # Use the official Kivy buildozer Docker image
        docker run --rm \
          --volume "$(pwd)/build-workspace":/home/user/hostcwd \
          --workdir /home/user/hostcwd \
          --user $(id -u):$(id -g) \
          kivy/buildozer:latest \
          buildozer android debug --verbose
    
    - name: Verify APK generation
      run: |
        echo '=== APK Verification ==='
        APK_COUNT=$(find build-workspace -name '*.apk' -type f | wc -l)
        echo "Found $APK_COUNT APK file(s)"
        
        if [ $APK_COUNT -gt 0 ]; then
          echo 'APK Details:'
          find build-workspace -name '*.apk' -type f -exec ls -lh {} \;
          find build-workspace -name '*.apk' -type f -exec file {} \;
          echo '✅ Official Kivy Buildozer APK build successful!'
        else
          echo '❌ No APK files generated'
          echo 'Build directory contents:'
          find build-workspace -type f -name '*.log' -exec echo '=== {} ===' \; -exec tail -100 {} \; || echo 'No log files'
          echo 'Checking .buildozer directory:'
          ls -la build-workspace/.buildozer/ 2>/dev/null || echo 'No .buildozer directory found'
          exit 1
        fi
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: kivy-buildozer-apk-${{ github.run_number }}
        path: build-workspace/bin/*.apk
        retention-days: 30
        if-no-files-found: error
    
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: kivy-build-logs-${{ github.run_number }}
        path: |
          build-workspace/.buildozer/
          build-workspace/*.log
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Final build summary
      if: always()
      run: |
        echo "## 🥝 Kivy Buildozer Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Method:** Official Kivy Buildozer Docker Image" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image:** kivy/buildozer:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Command:** buildozer android debug --verbose" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch:** ${{ github.event.inputs.branch || 'cross_plateform' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner:** ubuntu-latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if find build-workspace -name '*.apk' -type f | grep -q .; then
          APK_SIZE=$(find build-workspace -name '*.apk' -type f -exec ls -lh {} \; | awk '{print $5}' | head -1)
          echo "- **Status:** ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Generated:** ✅ Yes (Size: $APK_SIZE)" >> $GITHUB_STEP_SUMMARY
          echo "- **Download:** Available in artifacts section below" >> $GITHUB_STEP_SUMMARY
          echo "- **Note:** Built with the official Kivy Docker image! 🐳" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Generated:** ❌ No" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Required:** Check build logs in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Tip:** Check buildozer.spec configuration 🔧" >> $GITHUB_STEP_SUMMARY
        fi
