name: Build with unsuitable001/buildozer3

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'cross_plateform'
        type: string

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || 'cross_plateform' }}
        path: source-code
    
    - name: Prepare build workspace
      run: |
        mkdir -p build-workspace
        cp -r source-code/python/kivy/* build-workspace/
        
        # Create buildozer.spec if missing
        if [ ! -f "build-workspace/buildozer.spec" ]; then
          cat > build-workspace/buildozer.spec << 'EOF'
        [app]
        title = My Simple Kivy App
        package.name = simplekivyapp
        package.domain = org.example
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        version = 0.1
        requirements = python3,kivy==2.1.0
        orientation = portrait
        fullscreen = 0
        
        [buildozer]
        log_level = 2
        warn_on_root = 0
        
        [android]
        android.permissions = INTERNET
        android.api = 31
        android.minapi = 21
        android.ndk = 25b
        android.sdk = 31
        android.ndk_api = 21
        android.archs = arm64-v8a
        android.accept_sdk_license = True
        android.skip_update = False
        EOF
        fi
        
        echo "Build workspace contents:"
        ls -la build-workspace/
        
        # Set proper permissions for Docker volume mount
        chmod -R 777 build-workspace/
    
    - name: Pull unsuitable001/buildozer3 image
      run: |
        echo "Pulling unsuitable001/buildozer3 Docker image..."
        docker pull unsuitable001/buildozer3:latest
        
        echo "Image info:"
        docker inspect unsuitable001/buildozer3:latest --format='{{.Config.WorkingDir}}'
        docker inspect unsuitable001/buildozer3:latest --format='{{.Config.User}}'
    
    - name: Test Docker container setup
      run: |
        echo "Testing container environment..."
        docker run --rm \
          -v $(pwd)/build-workspace:/buildozer \
          unsuitable001/buildozer3:latest \
          /bin/bash -c "
            echo 'Container working directory:' && pwd &&
            echo 'User info:' && whoami &&
            echo 'Python version:' && python3 --version &&
            echo 'Buildozer version:' && buildozer version &&
            echo 'Contents of mounted directory:' && ls -la /buildozer/ &&
            echo 'Permissions check:' && ls -la /buildozer/
          "
    
    - name: Build APK with unsuitable001/buildozer3 (with fixes)
      run: |
        echo "Starting APK build with fixes for NDK download issues..."
        
        # Create a fixed buildozer.spec with pre-downloaded NDK path
        cat > build-workspace/buildozer.spec << 'EOF'
        [app]
        title = My Simple Kivy App
        package.name = simplekivyapp
        package.domain = org.example
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        version = 0.1
        requirements = python3,kivy==2.0.0
        orientation = portrait
        fullscreen = 0
        
        [buildozer]
        log_level = 2
        warn_on_root = 0
        
        [android]
        android.permissions = INTERNET
        android.api = 29
        android.minapi = 21
        android.ndk = 21b
        android.sdk = 29
        android.ndk_api = 21
        android.archs = armeabi-v7a
        android.accept_sdk_license = True
        android.skip_update = True
        EOF
        
        echo "Updated buildozer.spec for compatibility:"
        cat build-workspace/buildozer.spec
        
        # Try building with older, more stable settings
        docker run --rm \
          -v $(pwd)/build-workspace:/buildozer \
          -w /buildozer \
          -e BUILDOZER_WARN_ON_ROOT=0 \
          -e ANDROID_HOME=/opt/android-sdk \
          -e ANDROID_NDK_HOME=/opt/android-ndk \
          --network=host \
          unsuitable001/buildozer3:latest \
          /bin/bash -c "
            echo '=== Environment Setup ===' &&
            export PATH=\$PATH:/opt/android-sdk/tools:/opt/android-sdk/platform-tools &&
            echo 'Python version:' && python3 --version &&
            echo 'Available space:' && df -h &&
            echo 'Network connectivity:' && ping -c 2 google.com || echo 'Network test failed' &&
            
            echo '=== Pre-build Setup ===' &&
            # Create buildozer directories with proper permissions
            mkdir -p ~/.buildozer &&
            chmod -R 777 ~/.buildozer &&
            
            echo '=== Starting Build ===' &&
            timeout 1800 buildozer android debug || {
              echo 'Build failed or timed out, checking partial results...'
              find . -name '*.apk' -type f || echo 'No APK found'
              ls -la bin/ 2>/dev/null || echo 'No bin directory'
              exit 1
            } &&
            
            echo '=== Build Success ===' &&
            find . -name '*.apk' -type f &&
            ls -la bin/ || echo 'No bin directory found'
          "
    
    - name: Check build results
      run: |
        echo "=== Post-build analysis ==="
        echo "Build workspace contents:"
        find build-workspace -type f -name "*.apk" || echo "No APK files found"
        
        if [ -d "build-workspace/bin" ]; then
          echo "Contents of bin directory:"
          ls -la build-workspace/bin/
        else
          echo "No bin directory found"
        fi
        
        echo "All files in build workspace:"
        ls -la build-workspace/
    
    - name: Copy APK files for upload
      run: |
        mkdir -p artifacts
        
        # Search for APK files and copy them
        if find build-workspace -name "*.apk" -type f | head -1 | read; then
          find build-workspace -name "*.apk" -type f -exec cp {} artifacts/ \;
          echo "APK files copied to artifacts:"
          ls -la artifacts/
        else
          echo "No APK files found to copy"
          echo "Build may have failed. Creating error report..."
          echo "BUILD FAILED: No APK generated" > artifacts/build-error.txt
          echo "Check the build logs above for details" >> artifacts/build-error.txt
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: buildozer3-apk-${{ github.run_number }}
        path: artifacts/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Build summary
      if: always()
      run: |
        echo "## Build Summary with unsuitable001/buildozer3" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image:** unsuitable001/buildozer3:latest" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch:** ${{ github.event.inputs.branch || 'cross_plateform' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Path:** /python/kivy/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if find artifacts -name "*.apk" -type f | head -1 | read; then
          echo "- **Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Generated:** ✅ Available for download" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Build Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Generated:** ❌ No APK files found" >> $GITHUB_STEP_SUMMARY
          echo "- **Troubleshooting:** Check build logs above for error details" >> $GITHUB_STEP_SUMMARY
        fi
