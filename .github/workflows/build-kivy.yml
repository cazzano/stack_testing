name: Build APK - Buildozer Action (Fixed)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'cross_plateform'
        type: string

jobs:
  build-android-buildozer:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || 'cross_plateform' }}
        path: source-code
    
    - name: Free up disk space
      run: |
        # Clean up unnecessary files to free space
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        docker system prune -af
        df -h
    
    - name: Prepare build workspace
      run: |
        # Create build workspace in the expected structure
        mkdir -p build-workspace
        
        # Copy Kivy project files to build workspace
        if [ -d "source-code/python/kivy" ]; then
          cp -r source-code/python/kivy/* build-workspace/
        else
          cp -r source-code/* build-workspace/
        fi
        
        # Create optimized buildozer.spec
        cat > build-workspace/buildozer.spec << 'EOF'
[app]
title = My Kivy App
package.name = kivyapp
package.domain = org.example
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,txt,md,json
version = 0.1
requirements = python3,kivy==2.1.0,certifi
orientation = portrait
fullscreen = 0

[buildozer]
log_level = 2
warn_on_root = 0

[android]
android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
android.api = 33
android.minapi = 21
android.ndk = 25b
android.sdk = 33
android.ndk_api = 21
android.archs = arm64-v8a
android.accept_sdk_license = True
android.skip_update = False
android.gradle_dependencies = 
android.add_compile_options = 

# Auto-accept all Android SDK licenses
android.add_packaging_options = pickFirst **/libc++_shared.so, pickFirst **/libjsc.so
android.gradle_repositories = google(), mavenCentral()
EOF
        
        # Create main.py if it doesn't exist
        if [ ! -f build-workspace/main.py ]; then
          cat > build-workspace/main.py << 'EOF'
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
import platform

class KivyApp(App):
    def build(self):
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        title = Label(
            text='Hello from Kivy!',
            font_size='24sp',
            size_hint_y=None,
            height='60dp'
        )
        
        info = Label(
            text=f'Built with Buildozer Action\\nPython: {platform.python_version()}\\nPlatform: {platform.system()}',
            font_size='16sp',
            halign='center'
        )
        info.bind(size=info.setter('text_size'))
        
        layout.add_widget(title)
        layout.add_widget(info)
        return layout

if __name__ == '__main__':
    KivyApp().run()
EOF
        fi
        
        echo 'Build workspace prepared:'
        ls -la build-workspace/
        echo 'buildozer.spec content:'
        cat build-workspace/buildozer.spec
    
    - name: Cache Buildozer global directory  
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          buildozer-global-
    
    - name: Build Android APK with Buildozer Action
      uses: ArtemSBulgakov/buildozer-action@v1
      id: buildozer
      with:
        command: buildozer android debug
        repository_root: .
        workdir: build-workspace
        buildozer_version: stable
      env:
        APP_ANDROID_ARCH: arm64-v8a
    
    - name: Verify APK generation
      run: |
        echo '=== APK Verification ==='
        echo "Buildozer output filename: ${{ steps.buildozer.outputs.filename }}"
        
        # Check for APK files in multiple locations
        APK_COUNT=$(find . -name '*.apk' -type f 2>/dev/null | wc -l)
        echo "Found $APK_COUNT APK file(s) in workspace"
        
        if [ $APK_COUNT -gt 0 ]; then
          echo 'APK Details:'
          find . -name '*.apk' -type f -exec ls -lh {} \;
          find . -name '*.apk' -type f -exec file {} \;
          echo '✅ Buildozer Action APK build successful!'
        elif [ -n "${{ steps.buildozer.outputs.filename }}" ] && [ -f "${{ steps.buildozer.outputs.filename }}" ]; then
          echo '✅ APK found at buildozer output location!'
          ls -lh "${{ steps.buildozer.outputs.filename }}"
          file "${{ steps.buildozer.outputs.filename }}"
        else
          echo '❌ No APK files generated'
          echo 'Build workspace contents:'
          find build-workspace -type f -name '*.log' -exec echo '=== {} ===' \; -exec tail -50 {} \; 2>/dev/null || echo 'No log files'
          echo 'Checking bin directory:'
          ls -la build-workspace/bin/ 2>/dev/null || echo 'No bin directory found'
          exit 1
        fi
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-kivy-apk-${{ github.run_number }}
        path: |
          ${{ steps.buildozer.outputs.filename }}
          build-workspace/bin/*.apk
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-logs-${{ github.run_number }}
        path: |
          build-workspace/.buildozer/
          build-workspace/*.log
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Final build summary
      if: always()
      run: |
        echo "## 🚀 Buildozer Action Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Method:** ArtemSBulgakov/buildozer-action@v1" >> $GITHUB_STEP_SUMMARY
        echo "- **Buildozer Version:** stable (latest PyPI release)" >> $GITHUB_STEP_SUMMARY
        echo "- **Android Architecture:** arm64-v8a" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch:** ${{ github.event.inputs.branch || 'cross_plateform' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner:** ubuntu-latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ steps.buildozer.outputs.filename }}" ] && [ -f "${{ steps.buildozer.outputs.filename }}" ]; then
          APK_SIZE=$(ls -lh "${{ steps.buildozer.outputs.filename }}" | awk '{print $5}')
          echo "- **Status:** ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Generated:** ✅ Yes (Size: $APK_SIZE)" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Location:** \`${{ steps.buildozer.outputs.filename }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Download:** Available in artifacts section below" >> $GITHUB_STEP_SUMMARY
          echo "- **Note:** Successfully built with the community-maintained action! 🎉" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Generated:** ❌ No" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Required:** Check build logs in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Common Issues:** Check buildozer.spec syntax, file permissions, or disk space" >> $GITHUB_STEP_SUMMARY
        fi
