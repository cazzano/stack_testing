name: Build APK - Buildozer Action

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'cross_plateform'
        type: string

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || 'cross_plateform' }}
    
    - name: Prepare build workspace
      run: |
        # Check if we have a kivy subdirectory structure
        if [ -d "python/kivy" ]; then
          echo "Found python/kivy structure, copying files..."
          cp -r python/kivy/* .
        else
          echo "Using current directory as build source"
        fi
        
        # Create buildozer.spec if it doesn't exist
        if [ ! -f "buildozer.spec" ]; then
          echo "Creating buildozer.spec..."
          cat > buildozer.spec << 'EOF'
[app]
title = My Kivy App
package.name = kivyapp
package.domain = org.kivy
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,txt,md
version = 0.1
requirements = python3,kivy==2.1.0,certifi
orientation = portrait
fullscreen = 0

[buildozer]
log_level = 2
warn_on_root = 0

[android]
android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
android.api = 33
android.minapi = 21
android.ndk = 25b
android.sdk = 33
android.ndk_api = 21
android.archs = arm64-v8a
android.accept_sdk_license = True
android.skip_update = False

# Gradle settings
android.gradle_repositories = google(), mavenCentral()
android.add_packaging_options = pickFirst **/libc++_shared.so, pickFirst **/libjsc.so
EOF
        fi
        
        # Create main.py if it doesn't exist
        if [ ! -f "main.py" ]; then
          echo "Creating main.py..."
          cat > main.py << 'EOF'
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
import platform

class KivyApp(App):
    def build(self):
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        title = Label(
            text='Hello from Kivy!',
            font_size='24sp',
            size_hint_y=None,
            height='60dp'
        )
        
        info = Label(
            text=f'Built with Buildozer Action\\nPython: {platform.python_version()}\\nPlatform: {platform.system()}',
            font_size='16sp',
            halign='center'
        )
        info.bind(size=info.setter('text_size'))
        
        layout.add_widget(title)
        layout.add_widget(info)
        return layout

if __name__ == '__main__':
    KivyApp().run()
EOF
        fi
        
        echo "Build workspace prepared:"
        ls -la
        echo "Buildozer spec:"
        cat buildozer.spec

    - name: Build Android APK with Buildozer
      uses: ArtemSBulgakov/buildozer-action@v1
      id: buildozer
      with:
        command: buildozer android debug
        buildozer_version: ==1.5.0
        
    - name: Verify APK generation
      run: |
        echo '=== APK Verification ==='
        APK_COUNT=$(find . -name '*.apk' -type f | wc -l)
        echo "Found $APK_COUNT APK file(s)"
        
        if [ $APK_COUNT -gt 0 ]; then
          echo 'APK Details:'
          find . -name '*.apk' -type f -exec ls -lh {} \;
          find . -name '*.apk' -type f -exec file {} \;
          echo '✅ Buildozer Action APK build successful!'
        else
          echo '❌ No APK files generated'
          echo 'Build directory contents:'
          find . -type f -name '*.log' -exec echo '=== {} ===' \; -exec tail -50 {} \; 2>/dev/null || echo 'No log files'
          ls -la bin/ 2>/dev/null || echo 'No bin directory'
          exit 1
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-action-apk-${{ github.run_number }}
        path: bin/*.apk
        retention-days: 30
        if-no-files-found: error
    
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-action-logs-${{ github.run_number }}
        path: |
          .buildozer/
          *.log
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Final build summary
      if: always()
      run: |
        echo "## 🚀 Buildozer Action Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Method:** ArtemSBulgakov/buildozer-action@v1" >> $GITHUB_STEP_SUMMARY
        echo "- **Buildozer Version:** 1.5.0" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Branch:** ${{ github.event.inputs.branch || 'cross_plateform' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Container:** Official Kivy Buildozer Docker Image" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if find . -name '*.apk' -type f | grep -q .; then
          APK_SIZE=$(find . -name '*.apk' -type f -exec ls -lh {} \; | awk '{print $5}' | head -1)
          APK_NAME=$(find . -name '*.apk' -type f | head -1 | xargs basename)
          echo "- **Status:** ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Generated:** ✅ $APK_NAME (Size: $APK_SIZE)" >> $GITHUB_STEP_SUMMARY
          echo "- **Download:** Available in artifacts section below" >> $GITHUB_STEP_SUMMARY
          echo "- **Powered by:** Buildozer Action 🎯" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Generated:** ❌ No" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Required:** Check build logs in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Tip:** Review buildozer.spec configuration 📋" >> $GITHUB_STEP_SUMMARY
        fi
