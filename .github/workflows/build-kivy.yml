# Manual Docker approach
name: Build Kivy Android APK from cross_plateform branch

on:
  push:
    branches: [ cross_plateform ]
    paths: 
      - 'python/kivy/**'
  pull_request:
    branches: [ cross_plateform ]
    paths:
      - 'python/kivy/**'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'cross_plateform'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout cross_plateform branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || 'cross_plateform' }}
        fetch-depth: 0

    - name: Get Date
      id: get-date
      run: |
        echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT

    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('python/kivy/buildozer.spec') }}

    - uses: actions/cache@v4
      with:
        path: python/kivy/.buildozer
        key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('python/kivy/buildozer.spec') }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev
        pip3 install --upgrade pip setuptools wheel
        pip3 install buildozer cython

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2

    - name: Build APK with Buildozer
      working-directory: python/kivy
      run: |
        # Set environment variables
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
        
        # Initialize buildozer
        buildozer android debug

    - name: Find APK
      id: find-apk
      run: |
        APK_PATH=$(find python/kivy/bin -name "*.apk" -type f | head -1)
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kivy-android-app
        path: ${{ steps.find-apk.outputs.apk_path }}

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/cross_plateform'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: kivy-v${{ github.run_number }}
        name: Kivy App Release ${{ github.run_number }}
        files: ${{ steps.find-apk.outputs.apk_path }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
